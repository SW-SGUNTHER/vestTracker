'''
Sean Gunther
Integrated stepper motor control from taglines and camera capture.
Next steps are to add the opencv code and calibrate pixel distance to degrees 
'''

import cv2 #Open CV for visual identification
import numpy as np # Dependent for openCV
import picamera as picam  #necessary for running this software with the raspberry pi camera
import time # used to determine the framerate and timestamp
import RPi.GPIO as GPIO # used to operate the stepper motors
import datetime #necessary for the timestamped images

#init lines below
camera = picam.PiCamera(resolution=(640,360)) # very important to limit the resolution at capture instead of with cv2.resize()
start_time = int(round(time.time()*1000)) #init for the starttime, disregard the first output
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD) # sets the gpio nomenclature to refer to the board locations instead of the pin names
control_pins_pan = [3,5,7,11] # pins used for camera pan servo
control_pins_tilt = [13,15,16,18]
for pin in control_pins_pan: # this loop inits each pin in the list as an output and assigns it low
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, 0)
for pin in control_pins_tilt: # this loop inits each pin in the list as an output and assigns it low
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, 0)
#init lines above


# global vars below
halfstep_seq = [
    [1,0,0,0],
    [1,1,0,0],
    [0,1,0,0],
    [0,1,1,0],
    [0,0,1,0],
    [0,0,1,1],
    [0,0,0,1],
    [1,0,0,1]
]
'''
The above and below lists are the half step commands to turn the stepper.
It may be worth only using full steps for speed. either method will have sub-degree accuracy
512 half steps is a full rotation
half steps are 1.422 steps per degree
full steps are .711 steps per degree
60 degrees in full steps os 42.66
60 degrees in half steps is 85.33
'''

steps_per_deg = 512/360
Dist = int(60*steps_per_deg)


revHalfstep_seq = [
    [1,0,0,0],
    [1,0,0,1],
    [0,0,0,1],
    [0,0,1,1],
    [0,0,1,0],
    [0,1,1,0],
    [0,1,0,0],
    [1,1,0,0],
    ]

#global vars above


def capFunc():
    print('trying')
    date = datetime.datetime.now().strftime('%m-%d-%Y_%H.%M.%S')
    imgName = '/home/pi/Desktop/MotorCamPics/' + date + '.jpg'
    camera.annotate_text = date
    camera.capture(imgName)
    print('success')
    
def motorTurn(Dir,Val):
    
    Dist = int(Val)*steps_per_deg
    Dist = int(Dist)
    for i in range(Dist):
        for halfstep in range(8):
            for pin in range(4):
                if Dir.upper() == 'R':
                    GPIO.output(control_pins_pan[pin], revHalfstep_seq[halfstep][pin])
                elif Dir.upper() =='L':
                    GPIO.output(control_pins_pan[pin], halfstep_seq[halfstep][pin])
                elif Dir.upper() =='U':
                    GPIO.output(control_pins_tilt[pin], revHalfstep_seq[halfstep][pin])
                elif Dir.upper() == 'D':
                    GPIO.output(control_pins_tilt[pin], halfstep_seq[halfstep][pin])
            time.sleep(0.0025)
    print("Complete")

while True:
    Dir = input("Command: ")
    Val = input("Degrees: ")
    motorTurn(Dir,Val)
    
    
                

                    
                    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    


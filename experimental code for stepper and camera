
''' Vest Tracker
Sean Gunther
October 14, 2022


- In theory, this software identifies the centroid of the vest, but currently it thinks that everything not masked is the vest
- the code will now turn the motor
- the calculations for dx and dy are not accurate, it sometimes disregards negative numbers.
- still need to develop housing and motor
'''



import cv2 #Open CV for visual identification
import numpy as np # Dependent for openCV
import picamera as picam  #necessary for running this software with the raspberry pi camera
import time # used to determine the framerate
import RPi.GPIO as GPIO #gpio library to utilize gpio pins on raspberry pi

camera = picam.PiCamera(resolution=(640,360)) # very important to limit the resolution at capture instead of with cv2.resize()
#mask calibration values below
HSV_min = (26,0,250) #values used to identify the vest inside the office
HSV_max = (179,85,255) #values used to identify the vest inside the office


GPIO.setmode(GPIO.BOARD) # this describes the numbering system for the gpio pins. must be board for board locations
control_pins = [3,5,7,11] # pins for the first servo
for pin in control_pins: #iterates through the pins. this might be worth changing to make the code faster
  GPIO.setup(pin, GPIO.OUT) #init the pin
  GPIO.output(pin, 0)#set pin low
halfstep_seq = [ # these are half step increments. it might be worth running them in full steps to increase speed.
  [1,0,0,0], # step 0
  [1,1,0,0], # step 1
  [0,1,0,0], # step 2
  [0,1,1,0], # step 3
  [0,0,1,0], # step 4
  [0,0,1,1], # step 5
  [0,0,0,1], # step 6
  [1,0,0,1]  # step 7
]

revHalfstep_seq = [ # these are the steps in reverse so that it can turn counter clockwise.
    [1,0,0,0],
    [1,0,0,1],
    [0,0,0,1],
    [0,0,1,1],
    [0,0,1,0],
    [0,1,1,0],
    [0,1,0,0],
    [1,1,0,0],
    ]



start_time = int(round(time.time()*1000)) #init for the starttime, disregard the first output
ctr = 0 # init for the ctr
while True:
    
    camera.capture("cap.png") #creates a capture. each frame is saved as the same name
    frame = cv2.imread("/home/pi/Desktop/cap.png") #reads the capture from the desktop.
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV) #Converts the camera image into HSV
    Mask = cv2.inRange(hsv_frame, HSV_min, HSV_max) # generates the mask based on the hsv values from above
    M = cv2.moments(Mask) #creates a moment, not really sure how this works but it is necessary for finding the centroid
    cX = int(M["m10"] / M["m00"]) # develops the far left and right edges of the moment
    cY = (M["m01"] / M["m00"]) # develops the far up and down edges of the moment
    intCX = int(cX) # converts the values from array to int
    intCY = int(cY)# converts the values from array to int


    cv2.imshow('Mask', Mask) #shows the mask
    end_time = int(time.time()*1000) # time duration of calculations
    delta_time = end_time-start_time # calculates the time it took from start to finish
    
    dx = 320-intCX # calculation for the difference between the center of the image and the centroid of the vest
    dy = 180-intCY# calculation for the difference between the center of the image and the centroid of the vest 
    
    
    # the if statements below are supposed to find whether the centroid is in a certain direction of the center, but doesnt work properly
    if dx > 0:
        print("move left by " + str(dx)+ " pixels")
        Dist = int(512/4)
        for i in range(2*Dist):
            for halfstep in range(8):
                for pin in range(4):
                    GPIO.output(control_pins[pin], halfstep_seq[halfstep][pin])
                time.sleep(0.0025)  
    elif dx < 0:
        print("move right by " + str(dx)+ " pixels")
        Dist = int(512/4)
        for i in range(2*Dist):
            for halfstep in range(8):
                for pin in range(4):
                    GPIO.output(control_pins[pin], halfstep_seq[halfstep][pin])
                time.sleep(0.0025)
    if dy > 0:
        print("move down by " + str(dy)+ " pixels")
    elif dy < 0:
        print("move up by " + str(dy)+ " pixels")
    
    print(ctr,delta_time,cX,cY  ) # prints the various info
    key = cv2.waitKey(0) # any key will close the window and continue, waits until key is pressed
    cv2.destroyAllWindows()
    start_time = int(time.time()*1000)
    ctr = ctr+1 # increments the counter
   
